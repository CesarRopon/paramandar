{"version":3,"file":"index.js","sources":["../../../src/@ionic-native/plugins/http/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface HTTPResponse {\n  /**\n   * The status number of the response\n   */\n  status: number;\n  /**\n   * The headers of the response\n   */\n  headers: any;\n  /**\n   * The URL of the response. This property will be the final URL obtained after any redirects.\n   */\n  url: string;\n  /**\n   * The data that is in the response. This property usually exists when a promise returned by a request method resolves.\n   */\n  data?: any;\n  /**\n   * Error response from the server. This property usually exists when a promise returned by a request method rejects.\n   */\n  error?: string;\n}\n\n/**\n * @name HTTP\n * @description\n * Cordova / Phonegap plugin for communicating with HTTP servers. Supports iOS and Android.\n *\n * Advantages over Javascript requests:\n * - Background threading - all requests are done in a background thread\n * - SSL Pinning\n *\n * @usage\n * ```typescript\n * import { HTTP } from '@ionic-native/http';\n *\n * constructor(private http: HTTP) {}\n *\n * ...\n *\n * this.http.get('http://ionic.io', {}, {})\n *   .then(data => {\n *\n *     console.log(data.status);\n *     console.log(data.data); // data received by server\n *     console.log(data.headers);\n *\n *   })\n *   .catch(error => {\n *\n *     console.log(error.status);\n *     console.log(error.error); // error message as string\n *     console.log(error.headers);\n *\n *   });\n *\n * ```\n * @interfaces\n * HTTPResponse\n */\n@Plugin({\n  pluginName: 'HTTP',\n  plugin: 'cordova-plugin-advanced-http',\n  pluginRef: 'cordova.plugin.http',\n  repo: 'https://github.com/silkimen/cordova-plugin-advanced-http',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class HTTP extends IonicNativePlugin {\n  /**\n   * This returns an object representing a basic HTTP Authorization header of the form.\n   * @param username {string} Username\n   * @param password {string} Password\n   * @returns {Object} an object representing a basic HTTP Authorization header of the form {'Authorization': 'Basic base64EncodedUsernameAndPassword'}\n   */\n  @Cordova({ sync: true })\n  getBasicAuthHeader(\n    username: string,\n    password: string\n  ): { Authorization: string } {\n    return;\n  }\n\n  /**\n   * This sets up all future requests to use Basic HTTP authentication with the given username and password.\n   * @param username {string} Username\n   * @param password {string} Password\n   */\n  @Cordova({ sync: true })\n  useBasicAuth(username: string, password: string): void {}\n\n  /**\n   * Get all headers defined for a given hostname.\n   * @param host {string} The hostname\n   * @returns {string} return all headers defined for the hostname\n   */\n  @Cordova({ sync: true })\n  getHeaders(host: string): string {\n    return;\n  }\n\n  /**\n   * Set a header for all future requests. Takes a hostname, a header and a value.\n   * @param host {string} The hostname to be used for scoping this header\n   * @param header {string} The name of the header\n   * @param value {string} The value of the header\n   */\n  @Cordova({ sync: true })\n  setHeader(host: string, header: string, value: string): void {}\n\n  /**\n   * Get the name of the data serializer which will be used for all future POST and PUT requests.\n   * @returns {string} returns the name of the configured data serializer\n   */\n  @Cordova({ sync: true })\n  getDataSerializer(): string {\n    return;\n  }\n\n  /**\n   * Set the data serializer which will be used for all future POST and PUT requests. Takes a string representing the name of the serializer.\n   * @param serializer {string} The name of the serializer. Can be urlencoded, utf8 or json\n   */\n  @Cordova({ sync: true })\n  setDataSerializer(serializer: string): void {}\n\n  /**\n   * Add a custom cookie.\n   * @param url {string} Scope of the cookie\n   * @param cookie {string} RFC compliant cookie string\n   */\n  @Cordova({ sync: true })\n  setCookie(url: string, cookie: string): void {}\n\n  /**\n   * Clear all cookies.\n   */\n  @Cordova({ sync: true })\n  clearCookies(): void {}\n\n  /**\n   * Remove cookies for given URL.\n   * @param url {string}\n   * @param cb\n   */\n  @Cordova({ sync: true })\n  removeCookies(url: string, cb: () => void): void {}\n\n  /**\n   * Resolve cookie string for given URL.\n   * @param url {string}\n   */\n  @Cordova({ sync: true })\n  getCookieString(url: string): string {\n    return;\n  }\n\n  /**\n   * Get global request timeout value in seconds.\n   * @returns {number} returns the global request timeout value\n   */\n  @Cordova({ sync: true })\n  getRequestTimeout(): number {\n    return;\n  }\n\n  /**\n   * Set global request timeout value in seconds.\n   * @param timeout {number} The timeout in seconds. Default 60\n   */\n  @Cordova({ sync: true })\n  setRequestTimeout(timeout: number): void {}\n\n  /**\n   * Set SSL Cert handling mode, being one of the following values\n   * default: default SSL cert handling using system's CA certs\n   * nocheck: disable SSL cert checking, trusting all certs (meant to be used only for testing purposes)\n   * pinned: trust only provided certs\n   * @see https://github.com/silkimen/cordova-plugin-advanced-http#setsslcertmode\n   * @param {'default' | 'nocheck' | 'pinned'} mode SSL Cert handling mode\n   */\n  @Cordova()\n  setSSLCertMode(mode: 'default' | 'nocheck' | 'pinned'): Promise<void> {\n    return;\n  }\n\n  /**\n   * Disable following redirects automatically.\n   * @param disable {boolean} Set to true to disable following redirects automatically\n   * @returns {Promise<void>} returns a promise that will resolve on success, and reject on failure\n   */\n  @Cordova()\n  disableRedirect(disable: boolean): Promise<void> {\n    return;\n  }\n\n  /**\n   * Make a POST request\n   * @param url {string} The url to send the request to\n   * @param body {Object} The body of the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  post(url: string, body: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   * Make a GET request\n   * @param url {string} The url to send the request to\n   * @param parameters {Object} Parameters to send with the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  get(url: string, parameters: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   * Make a PUT request\n   * @param url {string} The url to send the request to\n   * @param body {Object} The body of the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  put(url: string, body: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   * Make a PATCH request\n   * @param url {string} The url to send the request to\n   * @param body {Object} The body of the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  patch(url: string, body: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   * Make a DELETE request\n   * @param url {string} The url to send the request to\n   * @param parameters {Object} Parameters to send with the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  delete(url: string, parameters: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   * Make a HEAD request\n   * @param url {string} The url to send the request to\n   * @param parameters {Object} Parameters to send with the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  head(url: string, parameters: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   *\n   * @param url {string} The url to send the request to\n   * @param body {Object} The body of the request\n   * @param headers {Object} The headers to set for this request\n   * @param filePath {string} The local path of the file to upload\n   * @param name {string} The name of the parameter to pass the file along as\n   * @returns {Promise<any>} returns a FileEntry promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  uploadFile(\n    url: string,\n    body: any,\n    headers: any,\n    filePath: string,\n    name: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * @param url {string} The url to send the request to\n   * @param body {Object} The body of the request\n   * @param headers {Object} The headers to set for this request\n   * @param filePath {string} The path to download the file to, including the file name.\n   * @returns {Promise<any>} returns a FileEntry promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  downloadFile(\n    url: string,\n    body: any,\n    headers: any,\n    filePath: string\n  ): Promise<any> {\n    return;\n  }\n}\n"]}